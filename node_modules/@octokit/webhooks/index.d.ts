// DO NOT EDIT THIS FILE DIRECTLY
// make edits in scripts/generate-types.js

import http = require("http");

export type Options = {
  secret: string;
  path?: string;
  transform?: (
    event: Webhooks.WebhookEvent<T>
  ) => Webhooks.WebhookEvent<T> & { [key: string]: any };
};

export type WebhookPayloadWatchSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadWatch = {
  action: string;
  repository: PayloadRepository;
  sender: WebhookPayloadWatchSender;
};
export type WebhookPayloadTeamAddSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadTeamAddOrganization = {
  login: string;
  id: number;
  node_id: string;
  url: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
};
export type WebhookPayloadTeamAddTeam = {
  name: string;
  id: number;
  node_id: string;
  slug: string;
  description: string;
  privacy: string;
  url: string;
  members_url: string;
  repositories_url: string;
  permission: string;
};
export type WebhookPayloadTeamAdd = {
  team: WebhookPayloadTeamAddTeam;
  repository: PayloadRepository;
  organization: WebhookPayloadTeamAddOrganization;
  sender: WebhookPayloadTeamAddSender;
};
export type WebhookPayloadTeamSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadTeamOrganization = {
  login: string;
  id: number;
  node_id: string;
  url: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
};
export type PayloadRepositoryPermissions = {
  pull: boolean;
  push: boolean;
  admin: boolean;
};
export type WebhookPayloadTeamTeam = {
  name: string;
  id: number;
  node_id: string;
  slug: string;
  description: string;
  privacy: string;
  url: string;
  members_url: string;
  repositories_url: string;
  permission: string;
};
export type WebhookPayloadTeam = {
  action: string;
  team: WebhookPayloadTeamTeam;
  repository: PayloadRepository;
  organization: WebhookPayloadTeamOrganization;
  sender: WebhookPayloadTeamSender;
};
export type WebhookPayloadStatusSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadStatusBranchesItemCommit = {
  sha: string;
  url: string;
};
export type WebhookPayloadStatusBranchesItem = {
  name: string;
  commit: WebhookPayloadStatusBranchesItemCommit;
};
export type WebhookPayloadStatusCommitCommitter = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadStatusCommitAuthor = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadStatusCommitCommitVerification = {
  verified: boolean;
  reason: string;
  signature: string;
  payload: string;
};
export type WebhookPayloadStatusCommitCommitTree = { sha: string; url: string };
export type WebhookPayloadStatusCommitCommitCommitter = {
  name: string;
  email: string;
  date: string;
};
export type WebhookPayloadStatusCommitCommitAuthor = {
  name: string;
  email: string;
  date: string;
};
export type WebhookPayloadStatusCommitCommit = {
  author: WebhookPayloadStatusCommitCommitAuthor;
  committer: WebhookPayloadStatusCommitCommitCommitter;
  message: string;
  tree: WebhookPayloadStatusCommitCommitTree;
  url: string;
  comment_count: number;
  verification: WebhookPayloadStatusCommitCommitVerification;
};
export type WebhookPayloadStatusCommit = {
  sha: string;
  node_id: string;
  commit: WebhookPayloadStatusCommitCommit;
  url: string;
  html_url: string;
  comments_url: string;
  author: WebhookPayloadStatusCommitAuthor;
  committer: WebhookPayloadStatusCommitCommitter;
  parents: Array<any>;
};
export type WebhookPayloadStatus = {
  id: number;
  sha: string;
  name: string;
  target_url: null;
  context: string;
  description: null;
  state: string;
  commit: WebhookPayloadStatusCommit;
  branches: Array<WebhookPayloadStatusBranchesItem>;
  created_at: string;
  updated_at: string;
  repository: PayloadRepository;
  sender: WebhookPayloadStatusSender;
};
export type WebhookPayloadSecurityAdvisorySecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion = {
  identifier: string;
};
export type WebhookPayloadSecurityAdvisorySecurityAdvisoryVulnerabilitiesItemPackage = {
  ecosystem: string;
  name: string;
};
export type WebhookPayloadSecurityAdvisorySecurityAdvisoryVulnerabilitiesItem = {
  package: WebhookPayloadSecurityAdvisorySecurityAdvisoryVulnerabilitiesItemPackage;
  severity: string;
  vulnerable_version_range: string;
  first_patched_version: WebhookPayloadSecurityAdvisorySecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion;
};
export type WebhookPayloadSecurityAdvisorySecurityAdvisoryReferencesItem = {
  url: string;
};
export type WebhookPayloadSecurityAdvisorySecurityAdvisoryIdentifiersItem = {
  value: string;
  type: string;
};
export type WebhookPayloadSecurityAdvisorySecurityAdvisory = {
  ghsa_id: string;
  summary: string;
  description: string;
  severity: string;
  identifiers: Array<
    WebhookPayloadSecurityAdvisorySecurityAdvisoryIdentifiersItem
  >;
  references: Array<
    WebhookPayloadSecurityAdvisorySecurityAdvisoryReferencesItem
  >;
  published_at: string;
  updated_at: string;
  withdrawn_at: null;
  vulnerabilities: Array<
    WebhookPayloadSecurityAdvisorySecurityAdvisoryVulnerabilitiesItem
  >;
};
export type WebhookPayloadSecurityAdvisory = {
  action: string;
  security_advisory: WebhookPayloadSecurityAdvisorySecurityAdvisory;
};
export type WebhookPayloadRepositoryVulnerabilityAlertAlertDismisser = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadRepositoryVulnerabilityAlertAlert = {
  id: number;
  affected_range: string;
  affected_package_name: string;
  external_reference: string;
  external_identifier: string;
  fixed_in: string;
  dismisser: WebhookPayloadRepositoryVulnerabilityAlertAlertDismisser;
  dismiss_reason: string;
  dismissed_at: string;
};
export type WebhookPayloadRepositoryVulnerabilityAlert = {
  action: string;
  alert: WebhookPayloadRepositoryVulnerabilityAlertAlert;
};
export type WebhookPayloadRepositoryImportSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadRepositoryImportOrganization = {
  login: string;
  id: number;
  node_id: string;
  url: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
};
export type WebhookPayloadRepositoryImport = {
  status: string;
  repository: PayloadRepository;
  organization: WebhookPayloadRepositoryImportOrganization;
  sender: WebhookPayloadRepositoryImportSender;
};
export type WebhookPayloadRepositorySender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadRepository = {
  action: string;
  repository: PayloadRepository;
  sender: WebhookPayloadRepositorySender;
};
export type WebhookPayloadReleaseSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadReleaseReleaseAuthor = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadReleaseRelease = {
  url: string;
  assets_url: string;
  upload_url: string;
  html_url: string;
  id: number;
  node_id: string;
  tag_name: string;
  target_commitish: string;
  name: null;
  draft: boolean;
  author: WebhookPayloadReleaseReleaseAuthor;
  prerelease: boolean;
  created_at: string;
  published_at: string;
  assets: Array<any>;
  tarball_url: string;
  zipball_url: string;
  body: null;
};
export type WebhookPayloadRelease = {
  action: string;
  release: WebhookPayloadReleaseRelease;
  repository: PayloadRepository;
  sender: WebhookPayloadReleaseSender;
};
export type WebhookPayloadPushSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadPushPusher = { name: string; email: string };
export type WebhookPayloadPush = {
  ref: string;
  before: string;
  after: string;
  created: boolean;
  deleted: boolean;
  forced: boolean;
  base_ref: null;
  compare: string;
  commits: Array<any>;
  head_commit: null;
  repository: PayloadRepository;
  pusher: WebhookPayloadPushPusher;
  sender: WebhookPayloadPushSender;
};
export type WebhookPayloadPullRequestReviewCommentSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadPullRequestReviewCommentPullRequestLinksStatuses = {
  href: string;
};
export type WebhookPayloadPullRequestReviewCommentPullRequestLinksCommits = {
  href: string;
};
export type WebhookPayloadPullRequestReviewCommentPullRequestLinksReviewComment = {
  href: string;
};
export type WebhookPayloadPullRequestReviewCommentPullRequestLinksReviewComments = {
  href: string;
};
export type WebhookPayloadPullRequestReviewCommentPullRequestLinksComments = {
  href: string;
};
export type WebhookPayloadPullRequestReviewCommentPullRequestLinksIssue = {
  href: string;
};
export type WebhookPayloadPullRequestReviewCommentPullRequestLinksHtml = {
  href: string;
};
export type WebhookPayloadPullRequestReviewCommentPullRequestLinksSelf = {
  href: string;
};
export type WebhookPayloadPullRequestReviewCommentPullRequestLinks = {
  self: WebhookPayloadPullRequestReviewCommentPullRequestLinksSelf;
  html: WebhookPayloadPullRequestReviewCommentPullRequestLinksHtml;
  issue: WebhookPayloadPullRequestReviewCommentPullRequestLinksIssue;
  comments: WebhookPayloadPullRequestReviewCommentPullRequestLinksComments;
  review_comments: WebhookPayloadPullRequestReviewCommentPullRequestLinksReviewComments;
  review_comment: WebhookPayloadPullRequestReviewCommentPullRequestLinksReviewComment;
  commits: WebhookPayloadPullRequestReviewCommentPullRequestLinksCommits;
  statuses: WebhookPayloadPullRequestReviewCommentPullRequestLinksStatuses;
};
export type WebhookPayloadPullRequestReviewCommentPullRequestBaseRepoOwner = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadPullRequestReviewCommentPullRequestBaseRepo = {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: WebhookPayloadPullRequestReviewCommentPullRequestBaseRepoOwner;
  private: boolean;
  html_url: string;
  description: null;
  fork: boolean;
  url: string;
  forks_url: string;
  keys_url: string;
  collaborators_url: string;
  teams_url: string;
  hooks_url: string;
  issue_events_url: string;
  events_url: string;
  assignees_url: string;
  branches_url: string;
  tags_url: string;
  blobs_url: string;
  git_tags_url: string;
  git_refs_url: string;
  trees_url: string;
  statuses_url: string;
  languages_url: string;
  stargazers_url: string;
  contributors_url: string;
  subscribers_url: string;
  subscription_url: string;
  commits_url: string;
  git_commits_url: string;
  comments_url: string;
  issue_comment_url: string;
  contents_url: string;
  compare_url: string;
  merges_url: string;
  archive_url: string;
  downloads_url: string;
  issues_url: string;
  pulls_url: string;
  milestones_url: string;
  notifications_url: string;
  labels_url: string;
  releases_url: string;
  deployments_url: string;
  created_at: string;
  updated_at: string;
  pushed_at: string;
  git_url: string;
  ssh_url: string;
  clone_url: string;
  svn_url: string;
  homepage: null;
  size: number;
  stargazers_count: number;
  watchers_count: number;
  language: null;
  has_issues: boolean;
  has_projects: boolean;
  has_downloads: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  forks_count: number;
  mirror_url: null;
  archived: boolean;
  open_issues_count: number;
  license: null;
  forks: number;
  open_issues: number;
  watchers: number;
  default_branch: string;
};
export type WebhookPayloadPullRequestReviewCommentPullRequestBaseUser = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadPullRequestReviewCommentPullRequestBase = {
  label: string;
  ref: string;
  sha: string;
  user: WebhookPayloadPullRequestReviewCommentPullRequestBaseUser;
  repo: WebhookPayloadPullRequestReviewCommentPullRequestBaseRepo;
};
export type WebhookPayloadPullRequestReviewCommentPullRequestHeadRepoOwner = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadPullRequestReviewCommentPullRequestHeadRepo = {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: WebhookPayloadPullRequestReviewCommentPullRequestHeadRepoOwner;
  private: boolean;
  html_url: string;
  description: null;
  fork: boolean;
  url: string;
  forks_url: string;
  keys_url: string;
  collaborators_url: string;
  teams_url: string;
  hooks_url: string;
  issue_events_url: string;
  events_url: string;
  assignees_url: string;
  branches_url: string;
  tags_url: string;
  blobs_url: string;
  git_tags_url: string;
  git_refs_url: string;
  trees_url: string;
  statuses_url: string;
  languages_url: string;
  stargazers_url: string;
  contributors_url: string;
  subscribers_url: string;
  subscription_url: string;
  commits_url: string;
  git_commits_url: string;
  comments_url: string;
  issue_comment_url: string;
  contents_url: string;
  compare_url: string;
  merges_url: string;
  archive_url: string;
  downloads_url: string;
  issues_url: string;
  pulls_url: string;
  milestones_url: string;
  notifications_url: string;
  labels_url: string;
  releases_url: string;
  deployments_url: string;
  created_at: string;
  updated_at: string;
  pushed_at: string;
  git_url: string;
  ssh_url: string;
  clone_url: string;
  svn_url: string;
  homepage: null;
  size: number;
  stargazers_count: number;
  watchers_count: number;
  language: null;
  has_issues: boolean;
  has_projects: boolean;
  has_downloads: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  forks_count: number;
  mirror_url: null;
  archived: boolean;
  open_issues_count: number;
  license: null;
  forks: number;
  open_issues: number;
  watchers: number;
  default_branch: string;
};
export type WebhookPayloadPullRequestReviewCommentPullRequestHeadUser = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadPullRequestReviewCommentPullRequestHead = {
  label: string;
  ref: string;
  sha: string;
  user: WebhookPayloadPullRequestReviewCommentPullRequestHeadUser;
  repo: WebhookPayloadPullRequestReviewCommentPullRequestHeadRepo;
};
export type WebhookPayloadPullRequestReviewCommentPullRequestUser = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadPullRequestReviewCommentPullRequest = {
  url: string;
  id: number;
  node_id: string;
  html_url: string;
  diff_url: string;
  patch_url: string;
  issue_url: string;
  number: number;
  state: string;
  locked: boolean;
  title: string;
  user: WebhookPayloadPullRequestReviewCommentPullRequestUser;
  body: string;
  created_at: string;
  updated_at: string;
  closed_at: null;
  merged_at: null;
  merge_commit_sha: string;
  assignee: null;
  assignees: Array<any>;
  requested_reviewers: Array<any>;
  requested_teams: Array<any>;
  labels: Array<any>;
  milestone: null;
  commits_url: string;
  review_comments_url: string;
  review_comment_url: string;
  comments_url: string;
  statuses_url: string;
  head: WebhookPayloadPullRequestReviewCommentPullRequestHead;
  base: WebhookPayloadPullRequestReviewCommentPullRequestBase;
  _links: WebhookPayloadPullRequestReviewCommentPullRequestLinks;
  author_association: string;
};
export type WebhookPayloadPullRequestReviewCommentCommentLinksPullRequest = {
  href: string;
};
export type WebhookPayloadPullRequestReviewCommentCommentLinksHtml = {
  href: string;
};
export type WebhookPayloadPullRequestReviewCommentCommentLinksSelf = {
  href: string;
};
export type WebhookPayloadPullRequestReviewCommentCommentLinks = {
  self: WebhookPayloadPullRequestReviewCommentCommentLinksSelf;
  html: WebhookPayloadPullRequestReviewCommentCommentLinksHtml;
  pull_request: WebhookPayloadPullRequestReviewCommentCommentLinksPullRequest;
};
export type WebhookPayloadPullRequestReviewCommentCommentUser = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadPullRequestReviewCommentComment = {
  url: string;
  pull_request_review_id: number;
  id: number;
  node_id: string;
  diff_hunk: string;
  path: string;
  position: number;
  original_position: number;
  commit_id: string;
  original_commit_id: string;
  user: WebhookPayloadPullRequestReviewCommentCommentUser;
  body: string;
  created_at: string;
  updated_at: string;
  html_url: string;
  pull_request_url: string;
  author_association: string;
  _links: WebhookPayloadPullRequestReviewCommentCommentLinks;
};
export type WebhookPayloadPullRequestReviewComment = {
  action: string;
  comment: WebhookPayloadPullRequestReviewCommentComment;
  pull_request: WebhookPayloadPullRequestReviewCommentPullRequest;
  repository: PayloadRepository;
  sender: WebhookPayloadPullRequestReviewCommentSender;
};
export type WebhookPayloadPullRequestReviewSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadPullRequestReviewPullRequestLinksStatuses = {
  href: string;
};
export type WebhookPayloadPullRequestReviewPullRequestLinksCommits = {
  href: string;
};
export type WebhookPayloadPullRequestReviewPullRequestLinksReviewComment = {
  href: string;
};
export type WebhookPayloadPullRequestReviewPullRequestLinksReviewComments = {
  href: string;
};
export type WebhookPayloadPullRequestReviewPullRequestLinksComments = {
  href: string;
};
export type WebhookPayloadPullRequestReviewPullRequestLinksIssue = {
  href: string;
};
export type WebhookPayloadPullRequestReviewPullRequestLinksHtml = {
  href: string;
};
export type WebhookPayloadPullRequestReviewPullRequestLinksSelf = {
  href: string;
};
export type WebhookPayloadPullRequestReviewPullRequestLinks = {
  self: WebhookPayloadPullRequestReviewPullRequestLinksSelf;
  html: WebhookPayloadPullRequestReviewPullRequestLinksHtml;
  issue: WebhookPayloadPullRequestReviewPullRequestLinksIssue;
  comments: WebhookPayloadPullRequestReviewPullRequestLinksComments;
  review_comments: WebhookPayloadPullRequestReviewPullRequestLinksReviewComments;
  review_comment: WebhookPayloadPullRequestReviewPullRequestLinksReviewComment;
  commits: WebhookPayloadPullRequestReviewPullRequestLinksCommits;
  statuses: WebhookPayloadPullRequestReviewPullRequestLinksStatuses;
};
export type WebhookPayloadPullRequestReviewPullRequestBaseRepoOwner = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadPullRequestReviewPullRequestBaseRepo = {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: WebhookPayloadPullRequestReviewPullRequestBaseRepoOwner;
  private: boolean;
  html_url: string;
  description: null;
  fork: boolean;
  url: string;
  forks_url: string;
  keys_url: string;
  collaborators_url: string;
  teams_url: string;
  hooks_url: string;
  issue_events_url: string;
  events_url: string;
  assignees_url: string;
  branches_url: string;
  tags_url: string;
  blobs_url: string;
  git_tags_url: string;
  git_refs_url: string;
  trees_url: string;
  statuses_url: string;
  languages_url: string;
  stargazers_url: string;
  contributors_url: string;
  subscribers_url: string;
  subscription_url: string;
  commits_url: string;
  git_commits_url: string;
  comments_url: string;
  issue_comment_url: string;
  contents_url: string;
  compare_url: string;
  merges_url: string;
  archive_url: string;
  downloads_url: string;
  issues_url: string;
  pulls_url: string;
  milestones_url: string;
  notifications_url: string;
  labels_url: string;
  releases_url: string;
  deployments_url: string;
  created_at: string;
  updated_at: string;
  pushed_at: string;
  git_url: string;
  ssh_url: string;
  clone_url: string;
  svn_url: string;
  homepage: null;
  size: number;
  stargazers_count: number;
  watchers_count: number;
  language: null;
  has_issues: boolean;
  has_projects: boolean;
  has_downloads: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  forks_count: number;
  mirror_url: null;
  archived: boolean;
  open_issues_count: number;
  license: null;
  forks: number;
  open_issues: number;
  watchers: number;
  default_branch: string;
};
export type WebhookPayloadPullRequestReviewPullRequestBaseUser = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadPullRequestReviewPullRequestBase = {
  label: string;
  ref: string;
  sha: string;
  user: WebhookPayloadPullRequestReviewPullRequestBaseUser;
  repo: WebhookPayloadPullRequestReviewPullRequestBaseRepo;
};
export type WebhookPayloadPullRequestReviewPullRequestHeadRepoOwner = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadPullRequestReviewPullRequestHeadRepo = {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: WebhookPayloadPullRequestReviewPullRequestHeadRepoOwner;
  private: boolean;
  html_url: string;
  description: null;
  fork: boolean;
  url: string;
  forks_url: string;
  keys_url: string;
  collaborators_url: string;
  teams_url: string;
  hooks_url: string;
  issue_events_url: string;
  events_url: string;
  assignees_url: string;
  branches_url: string;
  tags_url: string;
  blobs_url: string;
  git_tags_url: string;
  git_refs_url: string;
  trees_url: string;
  statuses_url: string;
  languages_url: string;
  stargazers_url: string;
  contributors_url: string;
  subscribers_url: string;
  subscription_url: string;
  commits_url: string;
  git_commits_url: string;
  comments_url: string;
  issue_comment_url: string;
  contents_url: string;
  compare_url: string;
  merges_url: string;
  archive_url: string;
  downloads_url: string;
  issues_url: string;
  pulls_url: string;
  milestones_url: string;
  notifications_url: string;
  labels_url: string;
  releases_url: string;
  deployments_url: string;
  created_at: string;
  updated_at: string;
  pushed_at: string;
  git_url: string;
  ssh_url: string;
  clone_url: string;
  svn_url: string;
  homepage: null;
  size: number;
  stargazers_count: number;
  watchers_count: number;
  language: null;
  has_issues: boolean;
  has_projects: boolean;
  has_downloads: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  forks_count: number;
  mirror_url: null;
  archived: boolean;
  open_issues_count: number;
  license: null;
  forks: number;
  open_issues: number;
  watchers: number;
  default_branch: string;
};
export type WebhookPayloadPullRequestReviewPullRequestHeadUser = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadPullRequestReviewPullRequestHead = {
  label: string;
  ref: string;
  sha: string;
  user: WebhookPayloadPullRequestReviewPullRequestHeadUser;
  repo: WebhookPayloadPullRequestReviewPullRequestHeadRepo;
};
export type WebhookPayloadPullRequestReviewPullRequestUser = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadPullRequestReviewPullRequest = {
  url: string;
  id: number;
  node_id: string;
  html_url: string;
  diff_url: string;
  patch_url: string;
  issue_url: string;
  number: number;
  state: string;
  locked: boolean;
  title: string;
  user: WebhookPayloadPullRequestReviewPullRequestUser;
  body: string;
  created_at: string;
  updated_at: string;
  closed_at: null;
  merged_at: null;
  merge_commit_sha: string;
  assignee: null;
  assignees: Array<any>;
  requested_reviewers: Array<any>;
  requested_teams: Array<any>;
  labels: Array<any>;
  milestone: null;
  commits_url: string;
  review_comments_url: string;
  review_comment_url: string;
  comments_url: string;
  statuses_url: string;
  head: WebhookPayloadPullRequestReviewPullRequestHead;
  base: WebhookPayloadPullRequestReviewPullRequestBase;
  _links: WebhookPayloadPullRequestReviewPullRequestLinks;
  author_association: string;
};
export type WebhookPayloadPullRequestReviewReviewLinksPullRequest = {
  href: string;
};
export type WebhookPayloadPullRequestReviewReviewLinksHtml = { href: string };
export type WebhookPayloadPullRequestReviewReviewLinks = {
  html: WebhookPayloadPullRequestReviewReviewLinksHtml;
  pull_request: WebhookPayloadPullRequestReviewReviewLinksPullRequest;
};
export type WebhookPayloadPullRequestReviewReviewUser = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadPullRequestReviewReview = {
  id: number;
  node_id: string;
  user: WebhookPayloadPullRequestReviewReviewUser;
  body: null;
  commit_id: string;
  submitted_at: string;
  state: string;
  html_url: string;
  pull_request_url: string;
  author_association: string;
  _links: WebhookPayloadPullRequestReviewReviewLinks;
};
export type WebhookPayloadPullRequestReview = {
  action: string;
  review: WebhookPayloadPullRequestReviewReview;
  pull_request: WebhookPayloadPullRequestReviewPullRequest;
  repository: PayloadRepository;
  sender: WebhookPayloadPullRequestReviewSender;
};
export type WebhookPayloadPullRequestSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadPullRequestPullRequestLinksStatuses = {
  href: string;
};
export type WebhookPayloadPullRequestPullRequestLinksCommits = { href: string };
export type WebhookPayloadPullRequestPullRequestLinksReviewComment = {
  href: string;
};
export type WebhookPayloadPullRequestPullRequestLinksReviewComments = {
  href: string;
};
export type WebhookPayloadPullRequestPullRequestLinksComments = {
  href: string;
};
export type WebhookPayloadPullRequestPullRequestLinksIssue = { href: string };
export type WebhookPayloadPullRequestPullRequestLinksHtml = { href: string };
export type WebhookPayloadPullRequestPullRequestLinksSelf = { href: string };
export type WebhookPayloadPullRequestPullRequestLinks = {
  self: WebhookPayloadPullRequestPullRequestLinksSelf;
  html: WebhookPayloadPullRequestPullRequestLinksHtml;
  issue: WebhookPayloadPullRequestPullRequestLinksIssue;
  comments: WebhookPayloadPullRequestPullRequestLinksComments;
  review_comments: WebhookPayloadPullRequestPullRequestLinksReviewComments;
  review_comment: WebhookPayloadPullRequestPullRequestLinksReviewComment;
  commits: WebhookPayloadPullRequestPullRequestLinksCommits;
  statuses: WebhookPayloadPullRequestPullRequestLinksStatuses;
};
export type WebhookPayloadPullRequestPullRequestBaseRepoOwner = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadPullRequestPullRequestBaseRepo = {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: WebhookPayloadPullRequestPullRequestBaseRepoOwner;
  private: boolean;
  html_url: string;
  description: null;
  fork: boolean;
  url: string;
  forks_url: string;
  keys_url: string;
  collaborators_url: string;
  teams_url: string;
  hooks_url: string;
  issue_events_url: string;
  events_url: string;
  assignees_url: string;
  branches_url: string;
  tags_url: string;
  blobs_url: string;
  git_tags_url: string;
  git_refs_url: string;
  trees_url: string;
  statuses_url: string;
  languages_url: string;
  stargazers_url: string;
  contributors_url: string;
  subscribers_url: string;
  subscription_url: string;
  commits_url: string;
  git_commits_url: string;
  comments_url: string;
  issue_comment_url: string;
  contents_url: string;
  compare_url: string;
  merges_url: string;
  archive_url: string;
  downloads_url: string;
  issues_url: string;
  pulls_url: string;
  milestones_url: string;
  notifications_url: string;
  labels_url: string;
  releases_url: string;
  deployments_url: string;
  created_at: string;
  updated_at: string;
  pushed_at: string;
  git_url: string;
  ssh_url: string;
  clone_url: string;
  svn_url: string;
  homepage: null;
  size: number;
  stargazers_count: number;
  watchers_count: number;
  language: null;
  has_issues: boolean;
  has_projects: boolean;
  has_downloads: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  forks_count: number;
  mirror_url: null;
  archived: boolean;
  open_issues_count: number;
  license: null;
  forks: number;
  open_issues: number;
  watchers: number;
  default_branch: string;
};
export type WebhookPayloadPullRequestPullRequestBaseUser = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadPullRequestPullRequestBase = {
  label: string;
  ref: string;
  sha: string;
  user: WebhookPayloadPullRequestPullRequestBaseUser;
  repo: WebhookPayloadPullRequestPullRequestBaseRepo;
};
export type WebhookPayloadPullRequestPullRequestHeadRepoOwner = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadPullRequestPullRequestHeadRepo = {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: WebhookPayloadPullRequestPullRequestHeadRepoOwner;
  private: boolean;
  html_url: string;
  description: null;
  fork: boolean;
  url: string;
  forks_url: string;
  keys_url: string;
  collaborators_url: string;
  teams_url: string;
  hooks_url: string;
  issue_events_url: string;
  events_url: string;
  assignees_url: string;
  branches_url: string;
  tags_url: string;
  blobs_url: string;
  git_tags_url: string;
  git_refs_url: string;
  trees_url: string;
  statuses_url: string;
  languages_url: string;
  stargazers_url: string;
  contributors_url: string;
  subscribers_url: string;
  subscription_url: string;
  commits_url: string;
  git_commits_url: string;
  comments_url: string;
  issue_comment_url: string;
  contents_url: string;
  compare_url: string;
  merges_url: string;
  archive_url: string;
  downloads_url: string;
  issues_url: string;
  pulls_url: string;
  milestones_url: string;
  notifications_url: string;
  labels_url: string;
  releases_url: string;
  deployments_url: string;
  created_at: string;
  updated_at: string;
  pushed_at: string;
  git_url: string;
  ssh_url: string;
  clone_url: string;
  svn_url: string;
  homepage: null;
  size: number;
  stargazers_count: number;
  watchers_count: number;
  language: null;
  has_issues: boolean;
  has_projects: boolean;
  has_downloads: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  forks_count: number;
  mirror_url: null;
  archived: boolean;
  open_issues_count: number;
  license: null;
  forks: number;
  open_issues: number;
  watchers: number;
  default_branch: string;
};
export type WebhookPayloadPullRequestPullRequestHeadUser = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadPullRequestPullRequestHead = {
  label: string;
  ref: string;
  sha: string;
  user: WebhookPayloadPullRequestPullRequestHeadUser;
  repo: WebhookPayloadPullRequestPullRequestHeadRepo;
};
export type WebhookPayloadPullRequestPullRequestUser = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadPullRequestPullRequest = {
  url: string;
  id: number;
  node_id: string;
  html_url: string;
  diff_url: string;
  patch_url: string;
  issue_url: string;
  number: number;
  state: string;
  locked: boolean;
  title: string;
  user: WebhookPayloadPullRequestPullRequestUser;
  body: string;
  created_at: string;
  updated_at: string;
  closed_at: string;
  merged_at: null;
  merge_commit_sha: string;
  assignee: null;
  assignees: Array<any>;
  requested_reviewers: Array<any>;
  requested_teams: Array<any>;
  labels: Array<any>;
  milestone: null;
  commits_url: string;
  review_comments_url: string;
  review_comment_url: string;
  comments_url: string;
  statuses_url: string;
  head: WebhookPayloadPullRequestPullRequestHead;
  base: WebhookPayloadPullRequestPullRequestBase;
  _links: WebhookPayloadPullRequestPullRequestLinks;
  author_association: string;
  merged: boolean;
  mergeable: boolean;
  rebaseable: boolean;
  mergeable_state: string;
  merged_by: null;
  comments: number;
  review_comments: number;
  maintainer_can_modify: boolean;
  commits: number;
  additions: number;
  deletions: number;
  changed_files: number;
};
export type WebhookPayloadPullRequest = {
  action: string;
  number: number;
  pull_request: WebhookPayloadPullRequestPullRequest;
  repository: PayloadRepository;
  sender: WebhookPayloadPullRequestSender;
};
export type WebhookPayloadPublicSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadPublic = {
  repository: PayloadRepository;
  sender: WebhookPayloadPublicSender;
};
export type WebhookPayloadProjectSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadProjectProjectCreator = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadProjectProject = {
  owner_url: string;
  url: string;
  html_url: string;
  columns_url: string;
  id: number;
  node_id: string;
  name: string;
  body: string;
  number: number;
  state: string;
  creator: WebhookPayloadProjectProjectCreator;
  created_at: string;
  updated_at: string;
};
export type WebhookPayloadProject = {
  action: string;
  project: WebhookPayloadProjectProject;
  repository: PayloadRepository;
  sender: WebhookPayloadProjectSender;
};
export type WebhookPayloadProjectColumnSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadProjectColumnProjectColumn = {
  url: string;
  project_url: string;
  cards_url: string;
  id: number;
  node_id: string;
  name: string;
  created_at: string;
  updated_at: string;
};
export type WebhookPayloadProjectColumn = {
  action: string;
  project_column: WebhookPayloadProjectColumnProjectColumn;
  repository: PayloadRepository;
  sender: WebhookPayloadProjectColumnSender;
};
export type WebhookPayloadProjectCardSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadProjectCardProjectCardCreator = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadProjectCardProjectCard = {
  url: string;
  project_url: string;
  column_url: string;
  column_id: number;
  id: number;
  node_id: string;
  note: string;
  creator: WebhookPayloadProjectCardProjectCardCreator;
  created_at: string;
  updated_at: string;
};
export type WebhookPayloadProjectCard = {
  action: string;
  project_card: WebhookPayloadProjectCardProjectCard;
  repository: PayloadRepository;
  sender: WebhookPayloadProjectCardSender;
};
export type WebhookPayloadPageBuildSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadPageBuildBuildPusher = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadPageBuildBuildError = { message: null };
export type WebhookPayloadPageBuildBuild = {
  url: string;
  status: string;
  error: WebhookPayloadPageBuildBuildError;
  pusher: WebhookPayloadPageBuildBuildPusher;
  commit: string;
  duration: number;
  created_at: string;
  updated_at: string;
};
export type WebhookPayloadPageBuild = {
  id: number;
  build: WebhookPayloadPageBuildBuild;
  repository: PayloadRepository;
  sender: WebhookPayloadPageBuildSender;
};
export type WebhookPayloadOrgBlockSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadOrgBlockOrganization = {
  login: string;
  id: number;
  node_id: string;
  url: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
};
export type WebhookPayloadOrgBlockBlockedUser = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadOrgBlock = {
  action: string;
  blocked_user: WebhookPayloadOrgBlockBlockedUser;
  organization: WebhookPayloadOrgBlockOrganization;
  sender: WebhookPayloadOrgBlockSender;
};
export type WebhookPayloadOrganizationSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadOrganizationOrganization = {
  login: string;
  id: number;
  node_id: string;
  url: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
};
export type WebhookPayloadOrganizationMembershipUser = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadOrganizationMembership = {
  url: string;
  state: string;
  role: string;
  organization_url: string;
  user: WebhookPayloadOrganizationMembershipUser;
};
export type WebhookPayloadOrganization = {
  action: string;
  membership: WebhookPayloadOrganizationMembership;
  organization: WebhookPayloadOrganizationOrganization;
  sender: WebhookPayloadOrganizationSender;
};
export type WebhookPayloadMilestoneSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadMilestoneMilestoneCreator = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadMilestoneMilestone = {
  url: string;
  html_url: string;
  labels_url: string;
  id: number;
  node_id: string;
  number: number;
  title: string;
  description: string;
  creator: WebhookPayloadMilestoneMilestoneCreator;
  open_issues: number;
  closed_issues: number;
  state: string;
  created_at: string;
  updated_at: string;
  due_on: string;
  closed_at: null;
};
export type WebhookPayloadMilestone = {
  action: string;
  milestone: WebhookPayloadMilestoneMilestone;
  repository: PayloadRepository;
  sender: WebhookPayloadMilestoneSender;
};
export type WebhookPayloadMembershipOrganization = {
  login: string;
  id: number;
  node_id: string;
  url: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
};
export type WebhookPayloadMembershipTeam = {
  name: string;
  id: number;
  node_id: string;
  slug: string;
  description: string;
  privacy: string;
  url: string;
  members_url: string;
  repositories_url: string;
  permission: string;
};
export type WebhookPayloadMembershipSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadMembershipMember = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadMembership = {
  action: string;
  scope: string;
  member: WebhookPayloadMembershipMember;
  sender: WebhookPayloadMembershipSender;
  team: WebhookPayloadMembershipTeam;
  organization: WebhookPayloadMembershipOrganization;
};
export type WebhookPayloadMemberSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadMemberChangesPermission = { from: string };
export type WebhookPayloadMemberChanges = {
  permission: WebhookPayloadMemberChangesPermission;
};
export type WebhookPayloadMemberMember = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadMember = {
  action: string;
  member: WebhookPayloadMemberMember;
  changes: WebhookPayloadMemberChanges;
  repository: PayloadRepository;
  sender: WebhookPayloadMemberSender;
};
export type WebhookPayloadMarketplacePurchaseMarketplacePurchasePlan = {
  id: number;
  name: string;
  description: string;
  monthly_price_in_cents: number;
  yearly_price_in_cents: number;
  price_model: string;
  has_free_trial: boolean;
  unit_name: string;
  bullets: Array<string>;
};
export type WebhookPayloadMarketplacePurchaseMarketplacePurchaseAccount = {
  type: string;
  id: number;
  login: string;
  organization_billing_email: string;
};
export type WebhookPayloadMarketplacePurchaseMarketplacePurchase = {
  account: WebhookPayloadMarketplacePurchaseMarketplacePurchaseAccount;
  billing_cycle: string;
  unit_count: number;
  on_free_trial: boolean;
  free_trial_ends_on: null;
  next_billing_date: string;
  plan: WebhookPayloadMarketplacePurchaseMarketplacePurchasePlan;
};
export type WebhookPayloadMarketplacePurchaseSender = {
  login: string;
  id: number;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  email: string;
};
export type WebhookPayloadMarketplacePurchase = {
  action: string;
  effective_date: string;
  sender: WebhookPayloadMarketplacePurchaseSender;
  marketplace_purchase: WebhookPayloadMarketplacePurchaseMarketplacePurchase;
};
export type WebhookPayloadLabelSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadLabelLabel = {
  id: number;
  node_id: string;
  url: string;
  name: string;
  color: string;
  default: boolean;
};
export type WebhookPayloadLabel = {
  action: string;
  label: WebhookPayloadLabelLabel;
  repository: PayloadRepository;
  sender: WebhookPayloadLabelSender;
};
export type WebhookPayloadIssuesSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadIssuesChanges = {};
export type WebhookPayloadIssuesIssueLabelsItem = {
  id: number;
  node_id: string;
  url: string;
  name: string;
  color: string;
  default: boolean;
};
export type WebhookPayloadIssuesIssueUser = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadIssuesIssue = {
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  id: number;
  node_id: string;
  number: number;
  title: string;
  user: WebhookPayloadIssuesIssueUser;
  labels: Array<WebhookPayloadIssuesIssueLabelsItem>;
  state: string;
  locked: boolean;
  assignee: null;
  assignees: Array<any>;
  milestone: null;
  comments: number;
  created_at: string;
  updated_at: string;
  closed_at: null;
  author_association: string;
  body: string;
};
export type WebhookPayloadIssues = {
  action: string;
  issue: WebhookPayloadIssuesIssue;
  changes: WebhookPayloadIssuesChanges;
  repository: PayloadRepository;
  sender: WebhookPayloadIssuesSender;
};
export type WebhookPayloadIssueCommentSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadIssueCommentCommentUser = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadIssueCommentComment = {
  url: string;
  html_url: string;
  issue_url: string;
  id: number;
  node_id: string;
  user: WebhookPayloadIssueCommentCommentUser;
  created_at: string;
  updated_at: string;
  author_association: string;
  body: string;
};
export type WebhookPayloadIssueCommentIssueLabelsItem = {
  id: number;
  node_id: string;
  url: string;
  name: string;
  color: string;
  default: boolean;
};
export type WebhookPayloadIssueCommentIssueUser = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadIssueCommentIssue = {
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  id: number;
  node_id: string;
  number: number;
  title: string;
  user: WebhookPayloadIssueCommentIssueUser;
  labels: Array<WebhookPayloadIssueCommentIssueLabelsItem>;
  state: string;
  locked: boolean;
  assignee: null;
  assignees: Array<any>;
  milestone: null;
  comments: number;
  created_at: string;
  updated_at: string;
  closed_at: null;
  author_association: string;
  body: string;
};
export type WebhookPayloadIssueComment = {
  action: string;
  issue: WebhookPayloadIssueCommentIssue;
  comment: WebhookPayloadIssueCommentComment;
  repository: PayloadRepository;
  sender: WebhookPayloadIssueCommentSender;
};
export type WebhookPayloadInstallationRepositoriesSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadInstallationRepositoriesRepositoriesRemovedItem = {
  id: number;
  name: string;
  full_name: string;
  private: boolean;
};
export type WebhookPayloadInstallationRepositoriesInstallationPermissions = {
  metadata: string;
  contents: string;
  issues: string;
};
export type WebhookPayloadInstallationRepositoriesInstallationAccount = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadInstallationRepositoriesInstallation = {
  id: number;
  account: WebhookPayloadInstallationRepositoriesInstallationAccount;
  repository_selection: string;
  access_tokens_url: string;
  repositories_url: string;
  html_url: string;
  app_id: number;
  target_id: number;
  target_type: string;
  permissions: WebhookPayloadInstallationRepositoriesInstallationPermissions;
  events: Array<string>;
  created_at: number;
  updated_at: number;
  single_file_name: string;
};
export type WebhookPayloadInstallationRepositories =
  | Array<WebhookPayloadInstallationRepositoriesItem>
  | {
      action: string;
      installation: WebhookPayloadInstallationRepositoriesInstallation;
      repository_selection: string;
      repositories_added: Array<any>;
      repositories_removed: Array<
        WebhookPayloadInstallationRepositoriesRepositoriesRemovedItem
      >;
      sender: WebhookPayloadInstallationRepositoriesSender;
    };
export type WebhookPayloadInstallationSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadInstallationRepositoriesItem = {
  id: number;
  name: string;
  full_name: string;
  private: boolean;
};
export type WebhookPayloadInstallationInstallationPermissions = {
  metadata: string;
  contents: string;
  issues: string;
};
export type WebhookPayloadInstallationInstallationAccount = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadInstallationInstallation = {
  id: number;
  account: WebhookPayloadInstallationInstallationAccount;
  repository_selection: string;
  access_tokens_url: string;
  repositories_url: string;
  html_url: string;
  app_id: number;
  target_id: number;
  target_type: string;
  permissions: WebhookPayloadInstallationInstallationPermissions;
  events: Array<string>;
  created_at: number;
  updated_at: number;
  single_file_name: string;
};
export type WebhookPayloadInstallation = {
  action: string;
  installation: WebhookPayloadInstallationInstallation;
  repositories: WebhookPayloadInstallationRepositories;
  sender: WebhookPayloadInstallationSender;
};
export type WebhookPayloadGollumSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadGollumPagesItem = {
  page_name: string;
  title: string;
  summary: null;
  action: string;
  sha: string;
  html_url: string;
};
export type WebhookPayloadGollum = {
  pages: Array<WebhookPayloadGollumPagesItem>;
  repository: PayloadRepository;
  sender: WebhookPayloadGollumSender;
};
export type WebhookPayloadGithubAppAuthorizationSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadGithubAppAuthorization = {
  action: string;
  sender: WebhookPayloadGithubAppAuthorizationSender;
};
export type WebhookPayloadForkSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadForkForkeeOwner = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadForkForkee = {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: WebhookPayloadForkForkeeOwner;
  private: boolean;
  html_url: string;
  description: null;
  fork: boolean;
  url: string;
  forks_url: string;
  keys_url: string;
  collaborators_url: string;
  teams_url: string;
  hooks_url: string;
  issue_events_url: string;
  events_url: string;
  assignees_url: string;
  branches_url: string;
  tags_url: string;
  blobs_url: string;
  git_tags_url: string;
  git_refs_url: string;
  trees_url: string;
  statuses_url: string;
  languages_url: string;
  stargazers_url: string;
  contributors_url: string;
  subscribers_url: string;
  subscription_url: string;
  commits_url: string;
  git_commits_url: string;
  comments_url: string;
  issue_comment_url: string;
  contents_url: string;
  compare_url: string;
  merges_url: string;
  archive_url: string;
  downloads_url: string;
  issues_url: string;
  pulls_url: string;
  milestones_url: string;
  notifications_url: string;
  labels_url: string;
  releases_url: string;
  deployments_url: string;
  created_at: string;
  updated_at: string;
  pushed_at: string;
  git_url: string;
  ssh_url: string;
  clone_url: string;
  svn_url: string;
  homepage: null;
  size: number;
  stargazers_count: number;
  watchers_count: number;
  language: null;
  has_issues: boolean;
  has_projects: boolean;
  has_downloads: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  forks_count: number;
  mirror_url: null;
  archived: boolean;
  open_issues_count: number;
  license: null;
  forks: number;
  open_issues: number;
  watchers: number;
  default_branch: string;
  public: boolean;
};
export type WebhookPayloadFork = {
  forkee: WebhookPayloadForkForkee;
  repository: PayloadRepository;
  sender: WebhookPayloadForkSender;
};
export type WebhookPayloadDeploymentStatusSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadDeploymentStatusDeploymentCreator = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadDeploymentStatusDeploymentPayload = {};
export type WebhookPayloadDeploymentStatusDeployment = {
  url: string;
  id: number;
  node_id: string;
  sha: string;
  ref: string;
  task: string;
  payload: WebhookPayloadDeploymentStatusDeploymentPayload;
  environment: string;
  description: null;
  creator: WebhookPayloadDeploymentStatusDeploymentCreator;
  created_at: string;
  updated_at: string;
  statuses_url: string;
  repository_url: string;
};
export type WebhookPayloadDeploymentStatusDeploymentStatusCreator = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadDeploymentStatusDeploymentStatus = {
  url: string;
  id: number;
  node_id: string;
  state: string;
  creator: WebhookPayloadDeploymentStatusDeploymentStatusCreator;
  description: string;
  target_url: string;
  created_at: string;
  updated_at: string;
  deployment_url: string;
  repository_url: string;
};
export type WebhookPayloadDeploymentStatus = {
  deployment_status: WebhookPayloadDeploymentStatusDeploymentStatus;
  deployment: WebhookPayloadDeploymentStatusDeployment;
  repository: PayloadRepository;
  sender: WebhookPayloadDeploymentStatusSender;
};
export type WebhookPayloadDeploymentSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadDeploymentDeploymentCreator = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadDeploymentDeploymentPayload = {};
export type WebhookPayloadDeploymentDeployment = {
  url: string;
  id: number;
  node_id: string;
  sha: string;
  ref: string;
  task: string;
  payload: WebhookPayloadDeploymentDeploymentPayload;
  environment: string;
  description: null;
  creator: WebhookPayloadDeploymentDeploymentCreator;
  created_at: string;
  updated_at: string;
  statuses_url: string;
  repository_url: string;
};
export type WebhookPayloadDeployment = {
  deployment: WebhookPayloadDeploymentDeployment;
  repository: PayloadRepository;
  sender: WebhookPayloadDeploymentSender;
};
export type WebhookPayloadDeleteSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadDelete = {
  ref: string;
  ref_type: string;
  pusher_type: string;
  repository: PayloadRepository;
  sender: WebhookPayloadDeleteSender;
};
export type WebhookPayloadCreateSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadCreate = {
  ref: string;
  ref_type: string;
  master_branch: string;
  description: null;
  pusher_type: string;
  repository: PayloadRepository;
  sender: WebhookPayloadCreateSender;
};
export type WebhookPayloadCommitCommentSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadCommitCommentCommentUser = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadCommitCommentComment = {
  url: string;
  html_url: string;
  id: number;
  node_id: string;
  user: WebhookPayloadCommitCommentCommentUser;
  position: null;
  line: null;
  path: null;
  commit_id: string;
  created_at: string;
  updated_at: string;
  author_association: string;
  body: string;
};
export type WebhookPayloadCommitComment = {
  action: string;
  comment: WebhookPayloadCommitCommentComment;
  repository: PayloadRepository;
  sender: WebhookPayloadCommitCommentSender;
};
export type WebhookPayloadCheckSuiteInstallation = { id: number };
export type WebhookPayloadCheckSuiteSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadCheckSuiteOrganization = {
  login: string;
  id: number;
  node_id: string;
  url: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
};
export type WebhookPayloadCheckSuiteCheckSuiteHeadCommitCommitter = {
  name: string;
  email: string;
};
export type WebhookPayloadCheckSuiteCheckSuiteHeadCommitAuthor = {
  name: string;
  email: string;
};
export type WebhookPayloadCheckSuiteCheckSuiteHeadCommit = {
  id: string;
  tree_id: string;
  message: string;
  timestamp: string;
  author: WebhookPayloadCheckSuiteCheckSuiteHeadCommitAuthor;
  committer: WebhookPayloadCheckSuiteCheckSuiteHeadCommitCommitter;
};
export type WebhookPayloadCheckSuiteCheckSuiteAppOwner = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadCheckSuiteCheckSuiteApp = {
  id: number;
  node_id: string;
  owner: WebhookPayloadCheckSuiteCheckSuiteAppOwner;
  name: string;
  description: null;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
};
export type WebhookPayloadCheckSuiteCheckSuite = {
  id: number;
  head_branch: string;
  head_sha: string;
  status: string;
  conclusion: string;
  url: string;
  before: string;
  after: string;
  pull_requests: Array<any>;
  app: WebhookPayloadCheckSuiteCheckSuiteApp;
  created_at: string;
  updated_at: string;
  latest_check_runs_count: number;
  check_runs_url: string;
  head_commit: WebhookPayloadCheckSuiteCheckSuiteHeadCommit;
};
export type WebhookPayloadCheckSuite = {
  action: string;
  check_suite: WebhookPayloadCheckSuiteCheckSuite;
  repository: PayloadRepository;
  organization: WebhookPayloadCheckSuiteOrganization;
  sender: WebhookPayloadCheckSuiteSender;
  installation: WebhookPayloadCheckSuiteInstallation;
};
export type WebhookPayloadCheckRunInstallation = { id: number };
export type WebhookPayloadCheckRunSender = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadCheckRunOrganization = {
  login: string;
  id: number;
  node_id: string;
  url: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string;
};
export type PayloadRepositoryOwner = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  name?: string;
  email?: string;
};
export type PayloadRepository = {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: PayloadRepositoryOwner;
  private: boolean;
  html_url: string;
  description: null;
  fork: boolean;
  url: string;
  forks_url: string;
  keys_url: string;
  collaborators_url: string;
  teams_url: string;
  hooks_url: string;
  issue_events_url: string;
  events_url: string;
  assignees_url: string;
  branches_url: string;
  tags_url: string;
  blobs_url: string;
  git_tags_url: string;
  git_refs_url: string;
  trees_url: string;
  statuses_url: string;
  languages_url: string;
  stargazers_url: string;
  contributors_url: string;
  subscribers_url: string;
  subscription_url: string;
  commits_url: string;
  git_commits_url: string;
  comments_url: string;
  issue_comment_url: string;
  contents_url: string;
  compare_url: string;
  merges_url: string;
  archive_url: string;
  downloads_url: string;
  issues_url: string;
  pulls_url: string;
  milestones_url: string;
  notifications_url: string;
  labels_url: string;
  releases_url: string;
  deployments_url: string;
  created_at: string | number;
  updated_at: string;
  pushed_at: string | number;
  git_url: string;
  ssh_url: string;
  clone_url: string;
  svn_url: string;
  homepage: null;
  size: number;
  stargazers_count: number;
  watchers_count: number;
  language: null;
  has_issues: boolean;
  has_projects: boolean;
  has_downloads: boolean;
  has_wiki: boolean;
  has_pages: boolean;
  forks_count: number;
  mirror_url: null;
  archived: boolean;
  open_issues_count: number;
  license: null;
  forks: number;
  open_issues: number;
  watchers: number;
  default_branch: string;
  stargazers?: number;
  master_branch?: string;
  permissions?: PayloadRepositoryPermissions;
};
export type WebhookPayloadCheckRunCheckRunAppOwner = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadCheckRunCheckRunApp = {
  id: number;
  node_id: string;
  owner: WebhookPayloadCheckRunCheckRunAppOwner;
  name: string;
  description: null;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
};
export type WebhookPayloadCheckRunCheckRunCheckSuiteAppOwner = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
};
export type WebhookPayloadCheckRunCheckRunCheckSuiteApp = {
  id: number;
  node_id: string;
  owner: WebhookPayloadCheckRunCheckRunCheckSuiteAppOwner;
  name: string;
  description: null;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
};
export type WebhookPayloadCheckRunCheckRunCheckSuite = {
  id: number;
  head_branch: string;
  head_sha: string;
  status: string;
  conclusion: string;
  url: string;
  before: string;
  after: string;
  pull_requests: Array<any>;
  app: WebhookPayloadCheckRunCheckRunCheckSuiteApp;
  created_at: string;
  updated_at: string;
};
export type WebhookPayloadCheckRunCheckRunOutput = {
  title: string;
  summary: string;
  text: string;
  annotations_count: number;
  annotations_url: string;
};
export type WebhookPayloadCheckRunCheckRun = {
  id: number;
  head_sha: string;
  external_id: string;
  url: string;
  html_url: string;
  status: string;
  conclusion: string;
  started_at: string;
  completed_at: string;
  output: WebhookPayloadCheckRunCheckRunOutput;
  name: string;
  check_suite: WebhookPayloadCheckRunCheckRunCheckSuite;
  app: WebhookPayloadCheckRunCheckRunApp;
  pull_requests: Array<any>;
};
export type WebhookPayloadCheckRun = {
  action: string;
  check_run: WebhookPayloadCheckRunCheckRun;
  repository: PayloadRepository;
  organization: WebhookPayloadCheckRunOrganization;
  sender: WebhookPayloadCheckRunSender;
  installation: WebhookPayloadCheckRunInstallation;
};

export namespace Webhooks {
  export interface WebhookEvent<T> {
    id: string;
    name: string;
    payload: T;
    protocol?: "http" | "https";
    host?: string;
    url?: string;
  }
}

export class Webhooks {
  constructor(options: Options);

  public on(event: "error", callback: (event: Error) => void): void;
  public on(
    event: "*" | string | string[],
    callback: (event: Webhooks.WebhookEvent<any>) => void
  ): void;
  public on(
    event: "*" | string | string[],
    callback: (event: Webhooks.WebhookEvent<any>) => Promise<void>
  ): void;

  public on(
    event:
      | "check_run"
      | "check_run.completed"
      | "check_run.created"
      | "check_run.requested_action"
      | "check_run.rerequested",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadCheckRun>) => void
  ): void;

  public on(
    event:
      | "check_suite"
      | "check_suite.completed"
      | "check_suite.requested"
      | "check_suite.rerequested",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadCheckSuite>) => void
  ): void;

  public on(
    event: "commit_comment" | "commit_comment.created",
    callback: (
      event: Webhooks.WebhookEvent<WebhookPayloadCommitComment>
    ) => void
  ): void;

  public on(
    event: "create",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadCreate>) => void
  ): void;

  public on(
    event: "delete",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadDelete>) => void
  ): void;

  public on(
    event: "deployment",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadDeployment>) => void
  ): void;

  public on(
    event: "deployment_status",
    callback: (
      event: Webhooks.WebhookEvent<WebhookPayloadDeploymentStatus>
    ) => void
  ): void;

  public on(
    event: "fork",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadFork>) => void
  ): void;

  public on(
    event: "github_app_authorization",
    callback: (
      event: Webhooks.WebhookEvent<WebhookPayloadGithubAppAuthorization>
    ) => void
  ): void;

  public on(
    event: "gollum",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadGollum>) => void
  ): void;

  public on(
    event: "installation" | "installation.created" | "installation.deleted",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadInstallation>) => void
  ): void;

  public on(
    event:
      | "installation_repositories"
      | "installation_repositories.added"
      | "installation_repositories.removed",
    callback: (
      event: Webhooks.WebhookEvent<WebhookPayloadInstallationRepositories>
    ) => void
  ): void;

  public on(
    event:
      | "issue_comment"
      | "issue_comment.created"
      | "issue_comment.deleted"
      | "issue_comment.edited",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadIssueComment>) => void
  ): void;

  public on(
    event:
      | "issues"
      | "issues.assigned"
      | "issues.closed"
      | "issues.deleted"
      | "issues.demilestoned"
      | "issues.edited"
      | "issues.labeled"
      | "issues.milestoned"
      | "issues.opened"
      | "issues.reopened"
      | "issues.transferred"
      | "issues.unassigned"
      | "issues.unlabeled",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadIssues>) => void
  ): void;

  public on(
    event: "label" | "label.created" | "label.deleted" | "label.edited",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadLabel>) => void
  ): void;

  public on(
    event:
      | "marketplace_purchase"
      | "marketplace_purchase.cancelled"
      | "marketplace_purchase.changed"
      | "marketplace_purchase.pending_change"
      | "marketplace_purchase.pending_change_cancelled"
      | "marketplace_purchase.purchased",
    callback: (
      event: Webhooks.WebhookEvent<WebhookPayloadMarketplacePurchase>
    ) => void
  ): void;

  public on(
    event: "member" | "member.added" | "member.deleted" | "member.edited",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadMember>) => void
  ): void;

  public on(
    event: "membership" | "membership.added" | "membership.removed",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadMembership>) => void
  ): void;

  public on(
    event:
      | "milestone"
      | "milestone.closed"
      | "milestone.created"
      | "milestone.deleted"
      | "milestone.edited"
      | "milestone.opened",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadMilestone>) => void
  ): void;

  public on(
    event:
      | "organization"
      | "organization.member_added"
      | "organization.member_invited"
      | "organization.member_removed",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadOrganization>) => void
  ): void;

  public on(
    event: "org_block" | "org_block.blocked" | "org_block.unblocked",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadOrgBlock>) => void
  ): void;

  public on(
    event: "page_build",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadPageBuild>) => void
  ): void;

  public on(
    event:
      | "project_card"
      | "project_card.converted"
      | "project_card.created"
      | "project_card.deleted"
      | "project_card.edited"
      | "project_card.moved",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadProjectCard>) => void
  ): void;

  public on(
    event:
      | "project_column"
      | "project_column.created"
      | "project_column.deleted"
      | "project_column.edited"
      | "project_column.moved",
    callback: (
      event: Webhooks.WebhookEvent<WebhookPayloadProjectColumn>
    ) => void
  ): void;

  public on(
    event:
      | "project"
      | "project.closed"
      | "project.created"
      | "project.deleted"
      | "project.edited"
      | "project.reopened",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadProject>) => void
  ): void;

  public on(
    event: "public",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadPublic>) => void
  ): void;

  public on(
    event:
      | "pull_request"
      | "pull_request.assigned"
      | "pull_request.closed"
      | "pull_request.edited"
      | "pull_request.labeled"
      | "pull_request.opened"
      | "pull_request.reopened"
      | "pull_request.review_request_removed"
      | "pull_request.review_requested"
      | "pull_request.unassigned"
      | "pull_request.unlabeled"
      | "pull_request.synchronize",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadPullRequest>) => void
  ): void;

  public on(
    event:
      | "pull_request_review"
      | "pull_request_review.dismissed"
      | "pull_request_review.edited"
      | "pull_request_review.submitted",
    callback: (
      event: Webhooks.WebhookEvent<WebhookPayloadPullRequestReview>
    ) => void
  ): void;

  public on(
    event:
      | "pull_request_review_comment"
      | "pull_request_review_comment.created"
      | "pull_request_review_comment.deleted"
      | "pull_request_review_comment.edited",
    callback: (
      event: Webhooks.WebhookEvent<WebhookPayloadPullRequestReviewComment>
    ) => void
  ): void;

  public on(
    event: "push",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadPush>) => void
  ): void;

  public on(
    event: "release" | "release.published",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadRelease>) => void
  ): void;

  public on(
    event:
      | "repository"
      | "repository.archived"
      | "repository.created"
      | "repository.deleted"
      | "repository.privatized"
      | "repository.publicized"
      | "repository.unarchived",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadRepository>) => void
  ): void;

  public on(
    event: "repository_import",
    callback: (
      event: Webhooks.WebhookEvent<WebhookPayloadRepositoryImport>
    ) => void
  ): void;

  public on(
    event:
      | "repository_vulnerability_alert"
      | "repository_vulnerability_alert.create"
      | "repository_vulnerability_alert.dismiss"
      | "repository_vulnerability_alert.resolve",
    callback: (
      event: Webhooks.WebhookEvent<WebhookPayloadRepositoryVulnerabilityAlert>
    ) => void
  ): void;

  public on(
    event:
      | "security_advisory"
      | "security_advisory.performed"
      | "security_advisory.published"
      | "security_advisory.updated",
    callback: (
      event: Webhooks.WebhookEvent<WebhookPayloadSecurityAdvisory>
    ) => void
  ): void;

  public on(
    event: "status",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadStatus>) => void
  ): void;

  public on(
    event:
      | "team"
      | "team.added_to_repository"
      | "team.created"
      | "team.deleted"
      | "team.edited"
      | "team.removed_from_repository",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadTeam>) => void
  ): void;

  public on(
    event: "team_add",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadTeamAdd>) => void
  ): void;

  public on(
    event: "watch" | "watch.started",
    callback: (event: Webhooks.WebhookEvent<WebhookPayloadWatch>) => void
  ): void;

  public sign(data: any): string;
  public verify(eventPayload: any, signature: string): boolean;
  public verifyAndReceive(options: {
    id: string;
    name: string;
    payload: any;
    signature: string;
  }): Promise<void>;
  public receive(options: {
    id: string;
    name: string;
    payload: any;
  }): Promise<void>;
  public removeListener(
    event: string | string[],
    callback: (event: Webhooks.WebhookEvent<any>) => void
  ): void;
  public removeListener(
    event: string | string[],
    callback: (event: Webhooks.WebhookEvent<any>) => Promise<void>
  ): void;
  public middleware(
    request: http.ClientRequest,
    response: http.ServerResponse,
    next: (err?: any) => void
  ): (request: http.IncomingMessage, response: http.ServerResponse) => void;
}

export = Webhooks;
